/* 
   XPECT_SETUP org.uqbar.project.wollok.tests.interpreter.WollokXPectInterpreterTestCase END_SETUP
   XPECT interpret 
*/

class Bird {
	var energy = 100
	
	invariant energy >= 0
	
	method fly(kms) {
		energy -= kms
	}
}

class Pet {
	var age
	
	invariant age != null : "Pets should have an age"
	
	constructor(_age) {
		age = _age
	}
	
}

class Triangle {
	var angle1 = 180
	var angle2 = 0
	var angle3 = 0
	
	invariant self.sumOfAngles() == 180 : "Sum of all angles must be 180 degrees"
	
	method sumOfAngles() = angle1 + angle2 + angle3
	
	method setAngle1(a) { angle1 = a }
	method setAngle2(a) { angle2 = a }
	method setAngle3(a) { angle3 = a }
}

class C {
	var a = 10
	var b = 10
	
	invariant a > 0
	invariant b > 0
	invariant b >= a
	
	method setA(_a) { a = _a }
	method setB(_b) { b = _b }
}

class D {
	var energy = 20
	
	invariant energy > 50
}

test "invariant are executed as part of method execution, after it and before returning from the method" {
	try {
		const bird = new Bird()
		bird.fly(120)
		assert.fail('Should have failed')
	}
	catch e {
		assert.equals('wollok.lang.InvariantViolationException', e.className())
		assert.equals('Violated invariant: Not satisfied (energy >= 0)', e.getMessage())
	}
}

test "invariant can call a method on self" {
	try {
		const triangle = new Triangle()
		triangle.setAngle1(120)
		assert.fail('Should have failed')
	}
	catch e {
		assert.equals('Violated invariant: Sum of all angles must be 180 degrees (self.sumOfAngles() == 180)', e.getMessage())
	}
}

test "invariant gets called as part as object initialization" {
	try {
		const pet = new Pet(null)
		console.println(pet)
		assert.fail('Should have failed')
	}
	catch e {
		assert.equals('Violated invariant: Pets should have an age (age != null)', e.getMessage())
	}
}

test "a class can have multiple invariants" {
	var c = new C()
	assert.throwsExceptionWithMessage("Violated invariant: Not satisfied (a > 0)", { =>
		c.setA(0)
	})
	c = new C()
	assert.throwsExceptionWithMessage("Violated invariant: Not satisfied (b > 0), Not satisfied (b >= a)", { =>
		c.setB(0)
	})
}

test "invariant not satisfied at construction time must fail" {
	assert.throwsExceptionWithMessage("Violated invariant: Not satisfied (energy > 50)", { =>
		const d = new D()   
		console.println(d)
	})
}

